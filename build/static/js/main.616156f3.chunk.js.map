{"version":3,"sources":["components/titles.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","React","Component","Form","onSubmit","this","props","loadWeather","type","name","placeholder","Weather","country","city","temperature","humidity","description","error","Api_Key","App","state","undefined","getWeather","_callee","e","api_call","response","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","titles","components_form","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.616156f3.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Titles extends React.Component {\n\n    render() {\n\n        return (\n\n            <div>\n\n                <h1 className=\"title-container__title\">Weather Scanner </h1>\n                <p className=\"title-container__subtitle\"> Helps you find weather conditions in cities...  </p>\n            </div>\n        )\n    }\n}\n\nexport default Titles;","import React from \"react\";\n\nclass Form extends React.Component{\n\n    render(){\n\n        return(\n                <form onSubmit = {this.props.loadWeather}>\n                    <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n                    <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n                    <button>Get Weather</button>\n                </form>\n           \n        )\n    }\n}\n\nexport default Form;","import React from \"react\";\n\nclass Weather extends React.Component{\n\n    render(){\n\n        return(\n\n            <div className=\"weather-info\">\n                {\n                    this.props.country && this.props.city && <p className=\"weather__key\">Location: \n                        <span className=\"weather__value\">  {this.props.city}, {this.props.country}</span>                    \n                    </p> \n                }\n                \n                {\n                    this.props.temperature && <p className=\"weather__key\">Temperature: \n                        <span className=\"weather__value\">  {this.props.temperature}</span>\n                    </p>\n                }\n\n                {\n                    this.props.humidity && <p className=\"weather__key\">Humidity: \n                        <span className=\"weather__value\">  {this.props.humidity}</span>\n                    </p>\n                }\n\n                {\n                    this.props.description && <p className=\"weather__key\">Conditions:  \n                        <span className=\"weather__value\">  {this.props.description}</span>\n                    </p>\n                }\n\n                {\n                    this.props.error && <p className=\"weather__error\">{this.props.error}</p>\n                }\n        \n            </div>\n        )\n    }\n}\n\nexport default Weather;\n","import React from 'react';\nimport './App.css';\nimport Titles from './components/titles';\nimport Form from './components/form';\nimport Weather from './components/weather';\n\nconst Api_Key = \"dc2e79ea5b82ec169c4329400280b744\";\n\nclass App extends React.Component {\n\n  state = {\n\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  //getWeather is a method we'll use to make the api call\n  getWeather = async (e) => {\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    e.preventDefault();   \n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);\n    const response = await api_call.json();\n    console.log(response);\n    if(city && country){\n      this.setState({\n        temperature: response.main.temp,\n        city: response.name,\n        country: response.sys.country,\n        humidity: response.main.humidity,\n        description: response.weather[0].description,\n        error: \"\"\n      })\n    }else{\n      this.setState({\n        error: \"Please input search values...\"\n      })\n    }\n  }\n\n  render() {\n\n    return (\n\n      <div>\n         <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                <Form loadWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}